/*
 * mitglieder-server
 * mitglieder-sync-desktop
 * Copyright (C) 2011-2012 art of coding UG, http://www.art-of-coding.eu/
 * Copyright (C) 2008-2010 Informationssysteme Ralf Bensmann, http://www.bensmann.com/
 *
 * Alle Rechte vorbehalten. Nutzung unterliegt Lizenzbedingungen.
 * All rights reserved. Use is subject to license terms.
 *
 * rbe, 29.12.12 13:19
 */

package eu.artofcoding.mitglieder.sync.desktop;

import org.jdesktop.application.Action;

import javax.swing.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;
import java.util.logging.Logger;
import java.util.prefs.Preferences;

public final class DatabaseConnectionDialog extends javax.swing.JDialog {

    /**
     * Java Logging API
     */
    private Logger logger;

    private Preferences pref;

    private Connection connection;

    /**
     * Creates new form DatabaseConnectionDialog
     * java.awt.Frame
     */
    public DatabaseConnectionDialog(JFrame parent, boolean modal) {
        super(parent, modal);
        logger = Logger.getLogger(getClass().getName());
        //
        initComponents();
        myInitComponents();
    }

    private void myInitComponents() {
        // Load preferences
        pref = Preferences.userNodeForPackage(getClass());
        if (pref != null) {
            String serverName = pref.get("serverName", null);
            if (serverName != null) {
                serverNameTextField.setText(serverName);
            }
            String serverPort = pref.get("serverPort", null);
            if (serverPort != null) {
                serverPortTextField.setText(serverPort);
            }
            String databaseName = pref.get("databaseName", null);
            if (databaseName != null) {
                databaseNameTextField.setText(databaseName);
            }
            String username = pref.get("username", null);
            if (username != null) {
                usernameTextField.setText(username);
            }
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    //GEN-BEGIN:initComponents
    private void initComponents() {

        connectionNameLabel = new javax.swing.JLabel();
        connectionNameComboBox = new javax.swing.JComboBox();
        serverTypeLabel = new javax.swing.JLabel();
        serverTypeComboBox = new javax.swing.JComboBox();
        serverNameLabel = new javax.swing.JLabel();
        serverNameTextField = new javax.swing.JTextField();
        serverPortLabel = new javax.swing.JLabel();
        serverPortTextField = new javax.swing.JTextField();
        databaseNameLabel = new javax.swing.JLabel();
        databaseNameTextField = new javax.swing.JTextField();
        usernameLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        connectButton = new javax.swing.JButton();
        debugCheckBox = new javax.swing.JCheckBox();

        setTitle("Datenbankverbindung");
        setName("DatabaseConnectionDialog"); // NOI18N
        setResizable(false);

        connectionNameLabel.setText("Name der Verbindung");
        connectionNameLabel.setEnabled(false);
        connectionNameLabel.setName("connectionNameLabel"); // NOI18N

        connectionNameComboBox.setEditable(true);
        connectionNameComboBox.setEnabled(false);
        connectionNameComboBox.setName("connectionNameComboBox"); // NOI18N

        serverTypeLabel.setText("Produkt");
        serverTypeLabel.setName("serverTypeLabel"); // NOI18N

        serverTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Microsoft SQL Server (jTDS)"}));
        serverTypeComboBox.setName("serverTypeComboBox"); // NOI18N

        serverNameLabel.setText("Name des Servers");
        serverNameLabel.setName("serverNameLabel"); // NOI18N

        serverNameTextField.setName("serverNameTextField"); // NOI18N

        serverPortLabel.setText("Port");
        serverPortLabel.setName("serverPortLabel"); // NOI18N

        serverPortTextField.setText("1433");
        serverPortTextField.setName("serverPortTextField"); // NOI18N

        databaseNameLabel.setText("Name der Datenbank");
        databaseNameLabel.setName("databaseNameLabel"); // NOI18N

        databaseNameTextField.setName("databaseNameTextField"); // NOI18N

        usernameLabel.setText("Benutzername");
        usernameLabel.setName("usernameLabel"); // NOI18N

        usernameTextField.setName("usernameTextField"); // NOI18N

        passwordLabel.setText("Passwort");
        passwordLabel.setName("passwordLabel"); // NOI18N

        passwordField.setName("passwordField"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(BVKDesktopApp.class).getContext().getActionMap(DatabaseConnectionDialog.class, this);
        connectButton.setAction(actionMap.get("connectAction")); // NOI18N
        connectButton.setText("Verbinden");
        connectButton.setName("connectButton"); // NOI18N

        debugCheckBox.setText("Debug");
        debugCheckBox.setName("debugCheckBox"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(connectionNameLabel)
                                                        .addComponent(serverTypeLabel)
                                                        .addComponent(serverPortLabel)
                                                        .addComponent(serverNameLabel))
                                                .addGap(16, 16, 16)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(serverTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(connectionNameComboBox, 0, 143, Short.MAX_VALUE)
                                                        .addComponent(serverNameTextField)
                                                        .addComponent(serverPortTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(databaseNameLabel)
                                                        .addComponent(passwordLabel)
                                                        .addComponent(usernameLabel))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(usernameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                                                        .addComponent(passwordField, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(connectButton)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                                                .addComponent(debugCheckBox))
                                                        .addComponent(databaseNameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(connectionNameLabel)
                                        .addComponent(connectionNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(serverTypeLabel)
                                        .addComponent(serverTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(serverNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(serverNameLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(serverPortLabel)
                                        .addComponent(serverPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(databaseNameLabel)
                                        .addComponent(databaseNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(usernameLabel)
                                        .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(passwordLabel)
                                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(connectButton)
                                        .addComponent(debugCheckBox))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>
    //GEN-END:initComponents

    @Action
    public void connectAction() {
        // Test arguments
        String serverType = (String) serverTypeComboBox.getSelectedItem();
        String serverName = serverNameTextField.getText();
        String serverPort = serverPortTextField.getText();
        String databaseName = databaseNameTextField.getText();
        String username = usernameTextField.getText();
        String password = new String(passwordField.getPassword());
        if (serverName != null && serverPort != null && databaseName != null && username != null) {
            if (serverType.indexOf("jTDS") > 0) {
                try {
                    // Setup JDBC connection
                    Class.forName("net.sourceforge.jtds.jdbc.Driver");
                    Properties prop = new Properties();
                    prop.put("username", username);
                    prop.put("password", password);
                    //prop.put("instance", "SQLExpress");
                    String jdbcUrl = "jdbc:jtds:sqlserver://" + serverName + ":" + serverPort + "/" + databaseName;
                    connection = DriverManager.getConnection(jdbcUrl, prop);
                    // Save preferences
                    if (pref != null) {
                        pref.put("serverName", serverName);
                        pref.put("serverPort", serverPort);
                        pref.put("databaseName", databaseName);
                        pref.put("username", username);
                        pref.put("jdbcUrl", jdbcUrl);
                    } else {
                        logger.info("Can't save preferences: pref == null");
                    }
                    //
                    setVisible(false);
                    dispose();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.toString(), "Fehler!", JOptionPane.ERROR_MESSAGE);
                } catch (ClassNotFoundException ex) {
                    JOptionPane.showMessageDialog(this, ex.toString(), "Fehler!", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Bitte alle Felder ausfüllen!", "Fehler!", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @return
     */
    public Connection getConnection() {
        return connection;
    }

    /**
     * @return
     */
    public boolean isDebugCheckboxSelected() {
        return debugCheckBox.isSelected();
    }

    /**
     * @return
     */
    public Preferences getPref() {
        return pref;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                DatabaseConnectionDialog dialog = new DatabaseConnectionDialog(null, true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    //GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JComboBox connectionNameComboBox;
    private javax.swing.JLabel connectionNameLabel;
    private javax.swing.JLabel databaseNameLabel;
    private javax.swing.JTextField databaseNameTextField;
    private javax.swing.JCheckBox debugCheckBox;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel serverNameLabel;
    private javax.swing.JTextField serverNameTextField;
    private javax.swing.JLabel serverPortLabel;
    private javax.swing.JTextField serverPortTextField;
    private javax.swing.JComboBox serverTypeComboBox;
    private javax.swing.JLabel serverTypeLabel;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration
    //GEN-END:variables
}
